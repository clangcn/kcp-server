#! /bin/bash
# chkconfig: 2345 55 25
# Description: Startup script for kcp-server on Debian. Place in /etc/init.d and
# run 'update-rc.d -f kcp-server defaults', or use the appropriate command on your
# distro. For CentOS/Redhat run: 'chkconfig --add ngrokd'
#=======================================================
#   System Required:  CentOS/Debian/Ubuntu (32bit/64bit)
#   Description:  Manager for kcp-server, Written by Clang
#   Author: Clang
#   Intro:  http://koolshare.cn/forum-72-1.html
#=======================================================
### BEGIN INIT INFO
# Provides:          kcp-server
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the kcp-server
# Description:       starts kcp-server using start-stop
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
ProgramName="kcp-server"
ProgramPath="/usr/local/kcp-server"
NAME=kcp-server
BIN=${ProgramPath}/${NAME}
CONFIGFILE=${ProgramPath}/config.json
LOGFILE=${ProgramPath}/kcp-server.log
SCRIPTNAME=/etc/init.d/${NAME}
PID_DIR=/var/run
PID_FILE=$PID_DIR/kcp-server.pid
version="1.1"
RET_VAL=0

[ -x $BIN ] || exit 0

fun_clangcn()
{
    echo ""
    echo "#############################################################"
    echo "#  Manager ${NAME} v${version} for CentOS/Debian/Ubuntu (32bit/64bit)"
    echo "#  Intro: http://koolshare.cn/forum-72-1.html"
    echo "#  Author: Clang"
    echo "#############################################################"
    echo ""
}

fun_check_run(){
    if netstat -ntupl | grep -q ${NAME};then
        return 0
    else
        rm -f $PID_FILE
        return 1
    fi
}
fun_load_config(){
    if [ ! -r ${CONFIGFILE} ]; then
        echo "config file ${CONFIGFILE} not found"
        return 1
    fi
}
fun_start()
{
    if [ "${arg1}" = "start" ]; then
      fun_clangcn
    fi
    if [ ! -d $PID_DIR ]; then
        mkdir -p $PID_DIR || echo "failed creating PID directory ${PID_DIR}"; exit 1
    fi
    if fun_check_run; then
        echo "${ProgramName} (pid `pidof $NAME`) already running."
        return 0
    fi
    fun_load_config
    echo -n "Starting ${ProgramName}..."
    ${BIN} -c ${CONFIGFILE} > ${LOGFILE} 2>&1 &
    PID=`pidof ${NAME}`
    echo $PID > $PID_FILE
    sleep 0.3
    if ! fun_check_run; then
        echo "start failed"
        return 1
    fi
    echo " done"
    echo "${ProgramName} (pid `pidof $NAME`)is running."
    echo "read ${LOGFILE} for log"
    return 0
}

fun_stop(){
    if [ "${arg1}" = "stop" ] || [ "${arg1}" = "restart" ]; then
      fun_clangcn
    fi
    if fun_check_run; then
        echo -n "Stoping ${ProgramName} (pid `pidof $NAME`)... "
        kill `pidof $NAME`
        if [ "$?" != 0 ] ; then
            echo " failed"
            exit 1
        else
            echo " done"
            rm -f $PID_FILE
        fi
    else
        echo "${ProgramName} is not running."
    fi
}
fun_restart(){
    fun_stop
    fun_start
}
fun_status(){
    if netstat -ntulp | grep -q ${NAME}; then
        PID=`pidof ${NAME}`
        echo "${ProgramName} (pid $PID) is running..."
        netstat -ntulp | grep "${NAME}"
    else
        echo "${ProgramName} is stopped"
        exit 0
    fi
}
checkos(){
    if grep -Eqi "CentOS" /etc/issue || grep -Eq "CentOS" /etc/*-release; then
        OS=CentOS
    elif grep -Eqi "Debian" /etc/issue || grep -Eq "Debian" /etc/*-release; then
        OS=Debian
    elif grep -Eqi "Ubuntu" /etc/issue || grep -Eq "Ubuntu" /etc/*-release; then
        OS=Ubuntu
    else
        echo "Not support OS, Please reinstall OS and retry!"
        exit 1
    fi
}
check_nano(){
    nano -V
    #echo $?
    if [[ $? -le 1 ]] ;then
        echo " Run nano success"
    else
        echo " Run nano failed"
        checkos
        if [ "${OS}" == 'CentOS' ]; then
            echo " Install  centos nano ..."
            #yum -y update
            yum -y install nano
        else
            echo " Install  debian/ubuntu nano ..."
            apt-get update -y
            apt-get install -y nano
        fi
    fi
    # if [[ ! -d "$result" ]]; then
        # echo "not found"
    # else
        # echo "found"
    # fi
    echo $result
}
fun_config(){
    check_nano
    if [ -s ${CONFIGFILE} ]; then
        nano ${CONFIGFILE}
    else
        echo "${ProgramName} configuration file not found!"
    fi
}

arg1=$1
arg2=$2
[  -z ${arg1} ]
case "${arg1}" in
    start|stop|restart|status|config)
        fun_${arg1} ${arg2}
    ;;
    *)
        fun_clangcn
        echo "Usage: $SCRIPTNAME {start|stop|restart|status|config}"
        RET_VAL=1
    ;;
esac
exit $RET_VAL
